import requests


class ExploitStrategy:
    """
    Implements a 'pseudo' Strategy Pattern for exploits. A concrete startegy is
    passed into the constructor, whose execute method will overwrite this object
    execute.
    """

    def __init__(self, pages, session, concrete_exploit, options):
        """
        constructor of ExpoloitStrategy
        """
        self.concrete_exploit = concrete_exploit
        self.pages = pages
        self.session = session
        self.options = options

    def execute(self):
        """
        execute strategy.
        calls execute of the concrete strategy passed into this object's constructor
        """
        self.concrete_exploit.execute(self.pages, self.session, self)

    def getVectors(self):
        """
        returns an array representation of all vectors
        """
        vectors = None

        try:
            vectors = open(self.options.vectors, "r").read().splitlines()
        except IOError:
            print('cannot open', self.options.vectors)

        return vectors

    def executeVector(self, url, vector, form):
        """
        executes a vector for a given form and page and returns the response
        """
        payload = {}  # inputs to submit
        action = form.get('action')
        method = form.get('method')
        response = None

        # fuzz all inputs in the form
        for input in form.get("inputs"):
            payload[input] = vector

        # supported actions are post/get
        try:
            if method == "post" or method == "POST":
                response = self.session.post(url + "/" + action, data=payload)

            elif method == "get" or method == "GET":
                response = self.session.get(url + "/" + action, params=payload)

        except requests.exceptions.TooManyRedirects:
            pass

        if response is not None:
            response.cookies = self.session.get_cookiejar()

        return response
