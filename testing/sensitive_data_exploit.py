

class SensitiveDataExploit():
    """
    implements the concrete sensitive data exploit
    strategy
    """

    def checkForSensitiveData(self, vector, response, sensitive):

        """
        check that response has been sanitized.
        """

        for item in sensitive:
            if item in response.text:
                print("Sensitive data leaked - \n  Vector: %s\n  Status:Code: %s\n"
                      % (vector, response.status_code))

    def execute(self, pages, session, strategy):
        """
        execute strategy - fuzz all inputs and make sure
        they have been sanitized
        """
        vectors = strategy.getVectors()

        print("checking for sensitive data--")

        for page in pages:
            forms = page.get("inputs").get("forms")
            url = page.get("url")

            for form in forms:
                for vector in vectors:
                    response = strategy.executeVector(url, vector, form)

                    if response is not None:
                        sensitive = open(strategy.options.sensitive, "r").read().splitlines()
                        self.checkForSensitiveData(vector, response, sensitive)

        print("done checking for sensitive data")
