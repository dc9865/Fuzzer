import time


class DelayedResponseExploit():
    """
	Implements the concrete delayed response exploit
	strategy.
	"""

    def execute(self, pages, session, strategy):
        """
		execute strategy
		"""

        DELAY_THRESHOLD = strategy.options.slow_ms
        vectors = strategy.getVectors()

        print("Sending requests to vectors and checking for delayed responses...")

        for page in pages:
            forms = page.get("inputs").get("forms")
            url = page.get("url")

            for form in forms:
                for vector in vectors:

                    # Time vector response time
                    start_time = time.time()
                    response = strategy.executeVector(url, vector, form)
                    end_time = time.time()
                    total_time = start_time - end_time

                    if total_time > DELAY_THRESHOLD:
                        print("Delayed Response - \n  Page: %s\n  Form: %s\n  Vector: %s\n  Time: %s\n"
                                % (url, form, vector, total_time))
