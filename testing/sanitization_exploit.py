

class SanitizationExploit():
    """
    implements the concrete sanitization exploit
    strategy.
    possible exploits are: sql injection, xss exploit, and others that result from
    not sanitizing special characters.
    """

    def execute(self, pages, session, strategy):
        """
        execute strategy - fuzz all inputs and make sure
        they have been sanitized
        """
        vectors = strategy.getVectors()

        print("Checking that input has been sanitized--")

        for page in pages:
            forms = page.get("inputs").get("forms")
            url = page.get("url")

            for form in forms:
                for vector in vectors:
                    response = strategy.executeVector(url, vector, form)

                    if response is not None:
                        self.checkForSanitization(vector, response, url)

        print("Sanitization checks complete")

    def checkForSQLExploit(self, response, url):
        """
        checks if the response has a sql exploit
        """

        if "MySQL " in response.text:
            print("Possible SQL exploit found on page: " + url)

    def checkForSpecialChars(self, vector, response, url):
        """
        checks to see that a few of the common special characters if in the vector has been
        sanitized in 'da' response
        """

        if "<" in vector or ">" in vector or "/" in vector or "\"" in vector or "?" in vector:
            if vector in response.text:
                print("Special characters were not sanitized or escaped in page " + url)

    def checkForSanitization(self, vector, response, url):
        """
        checks that response has been sanitized.
        """
        self.checkForSQLExploit(response, url)
        self.checkForSpecialChars(vector, response, url)